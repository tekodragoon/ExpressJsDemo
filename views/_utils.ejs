<% padTo2Digits = function(num) {
  return num.toString().padStart(2, '0');
}
%>

<% formatDate = function(date) {
  if (date.getFullYear() == 2030) {
    return "Not set"
  }
  return [
    padTo2Digits(date.getDate()),
    padTo2Digits(date.getMonth() + 1),
    date.getFullYear(),
  ].join('/');
}
%>

<% formatInputDate = function(date) {
  if (date.getFullYear() == 2030) {
    return "-";
  }
  return [
    date.getFullYear(),
    padTo2Digits(date.getMonth() + 1),
    padTo2Digits(date.getDate()),
  ].join('-');
}
%>

<% shortDate = function(date) {
  return [
    padTo2Digits(date.getDate()),
    date.toLocaleDateString("en-US", {month: 'short'}),
  ].join(' ');
}
%>

<% nextDate = function(date, next) {
  let result = new Date(date);
  result.setDate(date.getDate() + next);
  return result;
}
%>

<% nextStringDate = function(date, next) {
  let result = new Date(date);
  result.setDate(date.getDate() + next);
  return result.toLocaleDateString("en-US", 
  {
    weekday: 'short',
    day: 'numeric',
    month: 'short',
  });
}
%>

<% compareDate = function(date, toCompare) {
  let d = new Date(date);
  let t = new Date(toCompare);
  d.setHours(1,0,0,0);
  t.setHours(1,0,0,0);
  return t.getTime() === d.getTime();
}
%> 

<% reqDate = function(date, next) {
  let result = new Date(date);
  if (next) {
    result.setDate(date.getDate() + 7);
  } else {
    result.setDate(date.getDate() - 7);
  }
  return [
    result.getFullYear(),
    padTo2Digits(result.getMonth()),
    padTo2Digits(result.getDate()),
  ].join('');
}
%>

<% const today = () => {
  let d = new Date();
  d.setHours(0, 0, 0, 0);
  return d;
}
%>

<% isActive = function(subscriptions) {
  let curDate = today();
  let active = false;
  for (let i = 0; i < subscriptions.length; i++) {
    if (subscriptions[i].startDate <= curDate && subscriptions[i].endDate >= curDate) {
      active = true;
    }
  }
  return active ? "Active" : "Not active";
} 
%>

<% activeSubscription = function(subscriptions) {
  let curDate = today();
  for (let i = 0; i < subscriptions.length; i++) {
    if (subscriptions[i].startDate <= curDate && subscriptions[i].endDate >= curDate) {
      return subscriptions[i];
    }
  }
  return null;
} 
%>